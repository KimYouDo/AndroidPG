package kangwon.cse.jck.myruns3;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.ListFragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class HistoryFragment extends ListFragment
        implements LoaderManager.LoaderCallbacks<List<ExerciseEntry>> {
    public static final String FROM_HISTORY = "From_History";
    public static final String ROW_INDEX = "Row_Index";
    private HistoryAdapter adapter;

    public static String formatDateTime(long dateTime) {
        Date date = new Date(dateTime);
        SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm:ss");
        SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd yyyy");
        return timeFormat.format(date) + " " + dateFormat.format(date);
    }



    // Convert the duration from seconds to the proper format

    public static String formatDuration(double duration) {
        int minutes = (int)(duration/60);
        int seconds = (int)(duration%60);
        if (minutes == 0 && seconds == 0) return "0secs";
        return String.valueOf(minutes) + "min " + String.valueOf(seconds) + "secs";
    }


    public static String formatDistance(double distance, String unitPref) {
        if (unitPref.equals("Miles")) {
            distance /= ManualEntryActivity.MILES2KM; // converts from km to miles
        }
        return String.format("%.2f", distance)+" "+unitPref;
    }


    private void loadData()
    {
        if (getLoaderManager().getLoader(0) == null)
            getLoaderManager().initLoader(0, null, this).forceLoad();
        getLoaderManager().restartLoader(0, null, this).forceLoad();

    }

    public void onCreate(Bundle paramBundle) {
        super.onCreate(paramBundle);
        if (getActivity() != null) {
            this.adapter = new HistoryAdapter(getActivity(), new ArrayList());
            Log.d("adapter created", "adapter created");
            setListAdapter(this.adapter);
            loadData();
        }
        if (paramBundle != null) {
            setListAdapter(this.adapter);
            this.adapter.notifyDataSetChanged();
        }
    }

    public Loader<List<ExerciseEntry>> onCreateLoader(int paramInt, Bundle paramBundle) {
        Log.d("HistoryFragment: ", "Loader Created");
        return new HistoryLoader(getContext());
    }

    public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle) {
        return paramLayoutInflater.inflate(R.layout.fragment_history, paramViewGroup, false);
    }

    public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong) {
        super.onListItemClick(paramListView, paramView, paramInt, paramLong);
        long l = Long.parseLong(((TextView) paramView.findViewById(R.id.history_item_rowid)).getText().toString());
        if (MainActivity.DBhelper.fetchEntryByIndex(l).getInputType() == ((Integer) StartFragment.INPUT_TO_ID_MAP.get("직접 입력")).intValue())
            ;
        for (Intent localIntent = new Intent(getActivity(), DisplayEntryActivity.class); ; localIntent = new Intent(getActivity(), MapDisplayActivity.class)) {
            localIntent.putExtra(FROM_HISTORY, true);
            localIntent.putExtra(ROW_INDEX, l);
            getActivity().startActivity(localIntent);
            return;
        }
    }

    public void onLoadFinished(Loader<List<ExerciseEntry>> paramLoader, List<ExerciseEntry> paramList) {
        Log.d("HistoryFragment: ", "Loading Finished");
        this.adapter.clear();
        this.adapter.addAll(paramList);
    }

    public void onLoaderReset(Loader<List<ExerciseEntry>> paramLoader) {
    }

    public void onStart() {
        super.onStart();
        loadData();
    }

    class HistoryAdapter extends ArrayAdapter<ExerciseEntry> {
        HistoryAdapter(Context context, List<ExerciseEntry> entries) {
            super(context, 0, entries);
        }

        public View getView(int paramInt, View paramView, ViewGroup paramViewGroup) {
            if (paramView == null)
                paramView = LayoutInflater.from(getContext()).inflate(R.layout.history_item, paramViewGroup, false);
            ExerciseEntry localExerciseEntry = (ExerciseEntry) getItem(paramInt);
            ((TextView) paramView.findViewById(R.id.history_item_first_line)).setText(getFirstLine(localExerciseEntry));
            ((TextView) paramView.findViewById(R.id.history_item_second_line)).setText(getSecondLine(localExerciseEntry));
            ((TextView) paramView.findViewById(R.id.history_item_rowid)).setText(localExerciseEntry.getId() + "");
            return paramView;
        }

        private String getFirstLine(ExerciseEntry entry) {
            String input = StartFragment.ID_TO_INPUT[entry.getInputType()];
            String activity = StartFragment.ID_TO_ACTIVITY[entry.getActivityType()];
            String dateTime = formatDateTime(entry.getDateTime());
            return input + ": " + activity + ", " + dateTime;
        }

        private String getSecondLine(ExerciseEntry entry) {
            SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(getActivity());
            String unitPref = pref.getString(getString(R.string.unit_preference), getString(R.string.unit_km));
            String distance = formatDistance(entry.getDistance(), unitPref);
            String duration = formatDuration(entry.getDuration());
            return distance + ", " + duration;
        }

    }

    class HistoryLoader extends AsyncTaskLoader<List<ExerciseEntry>> {

        public HistoryLoader(Context context) {
            super(context);
        }

        @Override
        public List<ExerciseEntry> loadInBackground() {
            Log.d("loading", "loading");
            if (MainActivity.DBhelper != null);
            for (ArrayList localArrayList = MainActivity.DBhelper.fetchEntries(); ; localArrayList = null)
                return localArrayList;
        }
    }
}